#version 430 core

struct Triangle {
    vec3 v1;
    vec3 v2;
    vec3 v3;

    vec3 Indices;

    vec3 Edge1;
    vec3 Edge2;

    vec3 n1;
    vec3 n2;
    vec3 n3;

    vec3 Albedo;

    float Metalness;
    float Roughness;
    float IOR;
    float Tr;

    vec3 F0;
}

layout(std430, binding = 0) buffer TransformSSBO {
    mat4 projection;
    mat4 view;
    mat4 model;
} Transform;

layout(std430, binding = 12) buffer RendermeshSSBO {
    Triangle triangles[$];
} Rendermesh;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main()
{
    int index = gl_GlobalInvocationID.x

    for ( int i = 0; i < $; i++){
        Rendermesh.triangles[index].v1 = Transform.projection * Transform.view * Transform.model * vec4(Rendermesh.triangles[index].v1, 1.0);
        Rendermesh.triangles[index].v2 = Transform.projection * Transform.view * Transform.model * vec4(Rendermesh.triangles[index].v2, 1.0);
        Rendermesh.triangles[index].v3 = Transform.projection * Transform.view * Transform.model * vec4(Rendermesh.triangles[index].v3, 1.0);
        
        Rendermesh.triangles[index].n1 = Transform.projection * Transform.view * Transform.model * vec4(Rendermesh.triangles[index].n1, 1.0);
        Rendermesh.triangles[index].n2 = Transform.projection * Transform.view * Transform.model * vec4(Rendermesh.triangles[index].n2, 1.0);
        Rendermesh.triangles[index].n3 = Transform.projection * Transform.view * Transform.model * vec4(Rendermesh.triangles[index].n3, 1.0);

        Rendermesh.triangles[index].Edge1 = Rendermesh.triangles[index].v2 - Rendermesh.triangles[index].v1;
        Rendermesh.triangles[index].Edge2 = Rendermesh.triangles[index].v3 - Rendermesh.triangles[index].v1;
    }
    //gl_Position = projection * view * model * vec4(aPos, 1.0);

} 